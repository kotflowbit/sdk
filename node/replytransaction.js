// source: rpc/block.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.KotFlowBlock.ReplyTransaction');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.KotFlowBlock.ReplyTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.KotFlowBlock.ReplyTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.KotFlowBlock.ReplyTransaction.displayName = 'proto.KotFlowBlock.ReplyTransaction';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.KotFlowBlock.ReplyTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.KotFlowBlock.ReplyTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.KotFlowBlock.ReplyTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KotFlowBlock.ReplyTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: msg.getValue_asB64(),
    basefee: msg.getBasefee_asB64(),
    to: msg.getTo_asB64(),
    random: msg.getRandom_asB64(),
    txhash: msg.getTxhash_asB64(),
    time: msg.getTime_asB64(),
    nonce: msg.getNonce_asB64(),
    sign: msg.getSign_asB64(),
    state: jspb.Message.getBooleanFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.KotFlowBlock.ReplyTransaction}
 */
proto.KotFlowBlock.ReplyTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.KotFlowBlock.ReplyTransaction;
  return proto.KotFlowBlock.ReplyTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.KotFlowBlock.ReplyTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.KotFlowBlock.ReplyTransaction}
 */
proto.KotFlowBlock.ReplyTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBasefee(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTo(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRandom(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxhash(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTime(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSign(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.KotFlowBlock.ReplyTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.KotFlowBlock.ReplyTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.KotFlowBlock.ReplyTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KotFlowBlock.ReplyTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getBasefee_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getRandom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getTxhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getTime_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getSign_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getState();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * optional bytes Value = 1;
 * @return {string}
 */
proto.KotFlowBlock.ReplyTransaction.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Value = 1;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.KotFlowBlock.ReplyTransaction.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes Value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.KotFlowBlock.ReplyTransaction.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.KotFlowBlock.ReplyTransaction} returns this
 */
proto.KotFlowBlock.ReplyTransaction.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes BaseFee = 2;
 * @return {string}
 */
proto.KotFlowBlock.ReplyTransaction.prototype.getBasefee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes BaseFee = 2;
 * This is a type-conversion wrapper around `getBasefee()`
 * @return {string}
 */
proto.KotFlowBlock.ReplyTransaction.prototype.getBasefee_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBasefee()));
};


/**
 * optional bytes BaseFee = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBasefee()`
 * @return {!Uint8Array}
 */
proto.KotFlowBlock.ReplyTransaction.prototype.getBasefee_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBasefee()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.KotFlowBlock.ReplyTransaction} returns this
 */
proto.KotFlowBlock.ReplyTransaction.prototype.setBasefee = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes To = 3;
 * @return {string}
 */
proto.KotFlowBlock.ReplyTransaction.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes To = 3;
 * This is a type-conversion wrapper around `getTo()`
 * @return {string}
 */
proto.KotFlowBlock.ReplyTransaction.prototype.getTo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTo()));
};


/**
 * optional bytes To = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTo()`
 * @return {!Uint8Array}
 */
proto.KotFlowBlock.ReplyTransaction.prototype.getTo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTo()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.KotFlowBlock.ReplyTransaction} returns this
 */
proto.KotFlowBlock.ReplyTransaction.prototype.setTo = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes Random = 4;
 * @return {string}
 */
proto.KotFlowBlock.ReplyTransaction.prototype.getRandom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes Random = 4;
 * This is a type-conversion wrapper around `getRandom()`
 * @return {string}
 */
proto.KotFlowBlock.ReplyTransaction.prototype.getRandom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRandom()));
};


/**
 * optional bytes Random = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRandom()`
 * @return {!Uint8Array}
 */
proto.KotFlowBlock.ReplyTransaction.prototype.getRandom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRandom()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.KotFlowBlock.ReplyTransaction} returns this
 */
proto.KotFlowBlock.ReplyTransaction.prototype.setRandom = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes TxHash = 5;
 * @return {string}
 */
proto.KotFlowBlock.ReplyTransaction.prototype.getTxhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes TxHash = 5;
 * This is a type-conversion wrapper around `getTxhash()`
 * @return {string}
 */
proto.KotFlowBlock.ReplyTransaction.prototype.getTxhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxhash()));
};


/**
 * optional bytes TxHash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxhash()`
 * @return {!Uint8Array}
 */
proto.KotFlowBlock.ReplyTransaction.prototype.getTxhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxhash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.KotFlowBlock.ReplyTransaction} returns this
 */
proto.KotFlowBlock.ReplyTransaction.prototype.setTxhash = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes Time = 6;
 * @return {string}
 */
proto.KotFlowBlock.ReplyTransaction.prototype.getTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes Time = 6;
 * This is a type-conversion wrapper around `getTime()`
 * @return {string}
 */
proto.KotFlowBlock.ReplyTransaction.prototype.getTime_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTime()));
};


/**
 * optional bytes Time = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTime()`
 * @return {!Uint8Array}
 */
proto.KotFlowBlock.ReplyTransaction.prototype.getTime_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTime()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.KotFlowBlock.ReplyTransaction} returns this
 */
proto.KotFlowBlock.ReplyTransaction.prototype.setTime = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes Nonce = 7;
 * @return {string}
 */
proto.KotFlowBlock.ReplyTransaction.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes Nonce = 7;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.KotFlowBlock.ReplyTransaction.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes Nonce = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.KotFlowBlock.ReplyTransaction.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.KotFlowBlock.ReplyTransaction} returns this
 */
proto.KotFlowBlock.ReplyTransaction.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes Sign = 8;
 * @return {string}
 */
proto.KotFlowBlock.ReplyTransaction.prototype.getSign = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes Sign = 8;
 * This is a type-conversion wrapper around `getSign()`
 * @return {string}
 */
proto.KotFlowBlock.ReplyTransaction.prototype.getSign_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSign()));
};


/**
 * optional bytes Sign = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSign()`
 * @return {!Uint8Array}
 */
proto.KotFlowBlock.ReplyTransaction.prototype.getSign_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSign()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.KotFlowBlock.ReplyTransaction} returns this
 */
proto.KotFlowBlock.ReplyTransaction.prototype.setSign = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bool State = 9;
 * @return {boolean}
 */
proto.KotFlowBlock.ReplyTransaction.prototype.getState = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.KotFlowBlock.ReplyTransaction} returns this
 */
proto.KotFlowBlock.ReplyTransaction.prototype.setState = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


