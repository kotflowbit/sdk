// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc/block.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "rpc/Block.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Header);
GPBObjCClassDeclaration(Transaction);

#pragma mark - BlockRoot

@implementation BlockRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - BlockRoot_FileDescriptor

static GPBFileDescriptor *BlockRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"KotFlowBlock"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - HeightRequest

@implementation HeightRequest

@dynamic height;

typedef struct HeightRequest__storage_ {
  uint32_t _has_storage_[1];
  int64_t height;
} HeightRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = HeightRequest_FieldNumber_Height,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HeightRequest__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HeightRequest class]
                                     rootClass:[BlockRoot class]
                                          file:BlockRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HeightRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Block

@implementation Block

@dynamic height;
@dynamic hasHeader, header;
@dynamic transactionArray, transactionArray_Count;

typedef struct Block__storage_ {
  uint32_t _has_storage_[1];
  NSData *height;
  Header *header;
  NSMutableArray *transactionArray;
} Block__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = Block_FieldNumber_Height,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Block__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "header",
        .dataTypeSpecific.clazz = GPBObjCClass(Header),
        .number = Block_FieldNumber_Header,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Block__storage_, header),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transactionArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Transaction),
        .number = Block_FieldNumber_TransactionArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Block__storage_, transactionArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Block class]
                                     rootClass:[BlockRoot class]
                                          file:BlockRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Block__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001F\000\002F\000\003\000Transaction\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Header

@implementation Header

@dynamic parentHash;
@dynamic hash_p;
@dynamic time;
@dynamic nonce;
@dynamic miner;

typedef struct Header__storage_ {
  uint32_t _has_storage_[1];
  NSData *parentHash;
  NSData *hash_p;
  NSData *time;
  NSData *nonce;
  NSData *miner;
} Header__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parentHash",
        .dataTypeSpecific.clazz = Nil,
        .number = Header_FieldNumber_ParentHash,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Header__storage_, parentHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "hash_p",
        .dataTypeSpecific.clazz = Nil,
        .number = Header_FieldNumber_Hash_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Header__storage_, hash_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "time",
        .dataTypeSpecific.clazz = Nil,
        .number = Header_FieldNumber_Time,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Header__storage_, time),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "nonce",
        .dataTypeSpecific.clazz = Nil,
        .number = Header_FieldNumber_Nonce,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Header__storage_, nonce),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "miner",
        .dataTypeSpecific.clazz = Nil,
        .number = Header_FieldNumber_Miner,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Header__storage_, miner),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Header class]
                                     rootClass:[BlockRoot class]
                                          file:BlockRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Header__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001J\000\002\000Hash\000\003D\000\004E\000\005E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Transaction

@implementation Transaction

@dynamic value;
@dynamic baseFee;
@dynamic to;
@dynamic random;
@dynamic txHash;
@dynamic time;
@dynamic nonce;
@dynamic sign;
@dynamic state;

typedef struct Transaction__storage_ {
  uint32_t _has_storage_[1];
  NSData *value;
  NSData *baseFee;
  NSData *to;
  NSData *random;
  NSData *txHash;
  NSData *time;
  NSData *nonce;
  NSData *sign;
} Transaction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "value",
        .dataTypeSpecific.clazz = Nil,
        .number = Transaction_FieldNumber_Value,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Transaction__storage_, value),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "baseFee",
        .dataTypeSpecific.clazz = Nil,
        .number = Transaction_FieldNumber_BaseFee,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Transaction__storage_, baseFee),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "to",
        .dataTypeSpecific.clazz = Nil,
        .number = Transaction_FieldNumber_To,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Transaction__storage_, to),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "random",
        .dataTypeSpecific.clazz = Nil,
        .number = Transaction_FieldNumber_Random,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Transaction__storage_, random),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "txHash",
        .dataTypeSpecific.clazz = Nil,
        .number = Transaction_FieldNumber_TxHash,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Transaction__storage_, txHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "time",
        .dataTypeSpecific.clazz = Nil,
        .number = Transaction_FieldNumber_Time,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Transaction__storage_, time),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "nonce",
        .dataTypeSpecific.clazz = Nil,
        .number = Transaction_FieldNumber_Nonce,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Transaction__storage_, nonce),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = Transaction_FieldNumber_Sign,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Transaction__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "state",
        .dataTypeSpecific.clazz = Nil,
        .number = Transaction_FieldNumber_State,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Transaction class]
                                     rootClass:[BlockRoot class]
                                          file:BlockRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Transaction__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\001E\000\002G\000\003B\000\004F\000\005F\000\006D\000\007E\000\010D\000\tE\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
