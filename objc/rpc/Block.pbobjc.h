// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc/block.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Header;
@class Transaction;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - BlockRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface BlockRoot : GPBRootObject
@end

#pragma mark - HeightRequest

typedef GPB_ENUM(HeightRequest_FieldNumber) {
  HeightRequest_FieldNumber_Height = 1,
};

GPB_FINAL @interface HeightRequest : GPBMessage

@property(nonatomic, readwrite) int64_t height;

@end

#pragma mark - Block

typedef GPB_ENUM(Block_FieldNumber) {
  Block_FieldNumber_Height = 1,
  Block_FieldNumber_Header = 2,
  Block_FieldNumber_TransactionArray = 3,
};

GPB_FINAL @interface Block : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *height;

@property(nonatomic, readwrite, strong, null_resettable) Header *header;
/** Test to see if @c header has been set. */
@property(nonatomic, readwrite) BOOL hasHeader;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Transaction*> *transactionArray;
/** The number of items in @c transactionArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger transactionArray_Count;

@end

#pragma mark - Header

typedef GPB_ENUM(Header_FieldNumber) {
  Header_FieldNumber_ParentHash = 1,
  Header_FieldNumber_Hash_p = 2,
  Header_FieldNumber_Time = 3,
  Header_FieldNumber_Nonce = 4,
  Header_FieldNumber_Miner = 5,
};

GPB_FINAL @interface Header : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *parentHash;

@property(nonatomic, readwrite, copy, null_resettable) NSData *hash_p;

@property(nonatomic, readwrite, copy, null_resettable) NSData *time;

@property(nonatomic, readwrite, copy, null_resettable) NSData *nonce;

@property(nonatomic, readwrite, copy, null_resettable) NSData *miner;

@end

#pragma mark - Transaction

typedef GPB_ENUM(Transaction_FieldNumber) {
  Transaction_FieldNumber_Value = 1,
  Transaction_FieldNumber_BaseFee = 2,
  Transaction_FieldNumber_To = 3,
  Transaction_FieldNumber_Random = 4,
  Transaction_FieldNumber_TxHash = 5,
  Transaction_FieldNumber_Time = 6,
  Transaction_FieldNumber_Nonce = 7,
  Transaction_FieldNumber_Sign = 8,
  Transaction_FieldNumber_State = 9,
};

GPB_FINAL @interface Transaction : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *value;

@property(nonatomic, readwrite, copy, null_resettable) NSData *baseFee;

@property(nonatomic, readwrite, copy, null_resettable) NSData *to;

@property(nonatomic, readwrite, copy, null_resettable) NSData *random;

@property(nonatomic, readwrite, copy, null_resettable) NSData *txHash;

@property(nonatomic, readwrite, copy, null_resettable) NSData *time;

@property(nonatomic, readwrite, copy, null_resettable) NSData *nonce;

@property(nonatomic, readwrite, copy, null_resettable) NSData *sign;

@property(nonatomic, readwrite) BOOL state;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
